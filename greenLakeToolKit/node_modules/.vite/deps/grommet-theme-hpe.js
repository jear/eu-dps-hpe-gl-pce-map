import {
  require_Blank,
  require_CircleAlert,
  require_Close,
  require_Next,
  require_Previous,
  require_StyledIcon,
  require_utils
} from "./chunk-KCJ5WQQB.js";
import {
  Ae,
  init_styled_components_browser_esm
} from "./chunk-VTJXWTYV.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __commonJS,
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/grommet-icons/icons/Ascending.js
var require_Ascending = __commonJS({
  "node_modules/grommet-icons/icons/Ascending.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.Ascending = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _StyledIcon = require_StyledIcon();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    var Ascending2 = (0, _react.forwardRef)(function(props, ref) {
      return _react["default"].createElement(_StyledIcon.StyledIcon, _extends2({
        ref,
        viewBox: "0 0 24 24",
        a11yTitle: "Ascending"
      }, props), _react["default"].createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "m12.08 7.286.354-.353.354.353L17 11.498l-.707.708-3.358-3.359V17h-1V8.847l-3.359 3.359-.707-.708 4.212-4.212z",
        fill: "#000"
      }));
    });
    exports.Ascending = Ascending2;
    Ascending2.displayName = "Ascending";
  }
});

// node_modules/grommet-icons/icons/Descending.js
var require_Descending = __commonJS({
  "node_modules/grommet-icons/icons/Descending.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.Descending = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _StyledIcon = require_StyledIcon();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    var Descending2 = (0, _react.forwardRef)(function(props, ref) {
      return _react["default"].createElement(_StyledIcon.StyledIcon, _extends2({
        ref,
        viewBox: "0 0 24 24",
        a11yTitle: "Descending"
      }, props), _react["default"].createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "m11.92 16.714-.354.353-.354-.353L7 12.502l.707-.708 3.359 3.359V7h1v8.153l3.358-3.359.707.708-4.212 4.212z",
        fill: "#000"
      }));
    });
    exports.Descending = Descending2;
    Descending2.displayName = "Descending";
  }
});

// node_modules/grommet-icons/icons/Down.js
var require_Down = __commonJS({
  "node_modules/grommet-icons/icons/Down.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.Down = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _StyledIcon = require_StyledIcon();
    var _utils = require_utils();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    var Down2 = (0, _react.forwardRef)(function(props, ref) {
      var scaleProps = (0, _utils.useScaleProps)(props);
      return _react["default"].createElement(_StyledIcon.StyledIcon, _extends2({
        ref,
        viewBox: "0 0 24 24",
        a11yTitle: "Down"
      }, props), _react["default"].createElement("path", _extends2({
        fill: "none",
        stroke: "#000",
        strokeWidth: "2",
        d: "m2 8.35 10.173 9.823L21.997 8"
      }, scaleProps)));
    });
    exports.Down = Down2;
    Down2.displayName = "Down";
  }
});

// node_modules/grommet-icons/icons/Unsorted.js
var require_Unsorted = __commonJS({
  "node_modules/grommet-icons/icons/Unsorted.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.Unsorted = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _StyledIcon = require_StyledIcon();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    var Unsorted2 = (0, _react.forwardRef)(function(props, ref) {
      return _react["default"].createElement(_StyledIcon.StyledIcon, _extends2({
        ref,
        viewBox: "0 0 24 24",
        a11yTitle: "Unsorted"
      }, props), _react["default"].createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "m15.204 15.321 1.597-1.597.707.707-2.45 2.45-.354.354-.353-.353-2.45-2.45.707-.708 1.596 1.597V7.217h1v8.104zm-5.9-6.407v8.104h1V8.914l1.597 1.597.707-.707-2.45-2.45L9.803 7l-.354.354L7 9.804l.707.707 1.597-1.597z",
        fill: "#000"
      }));
    });
    exports.Unsorted = Unsorted2;
    Unsorted2.displayName = "Unsorted";
  }
});

// node_modules/grommet-icons/icons/Up.js
var require_Up = __commonJS({
  "node_modules/grommet-icons/icons/Up.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.Up = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _StyledIcon = require_StyledIcon();
    var _utils = require_utils();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    var Up2 = (0, _react.forwardRef)(function(props, ref) {
      var scaleProps = (0, _utils.useScaleProps)(props);
      return _react["default"].createElement(_StyledIcon.StyledIcon, _extends2({
        ref,
        viewBox: "0 0 24 24",
        a11yTitle: "Up"
      }, props), _react["default"].createElement("path", _extends2({
        fill: "none",
        stroke: "#000",
        strokeWidth: "2",
        d: "m2 15.999 10.173-9.824 9.824 10.173"
      }, scaleProps)));
    });
    exports.Up = Up2;
    Up2.displayName = "Up";
  }
});

// node_modules/grommet-icons/icons/Hpe.js
var require_Hpe = __commonJS({
  "node_modules/grommet-icons/icons/Hpe.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.Hpe = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _StyledIcon = require_StyledIcon();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _extends2() {
      _extends2 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends2.apply(this, arguments);
    }
    var Hpe2 = (0, _react.forwardRef)(function(props, ref) {
      return _react["default"].createElement(_StyledIcon.StyledIcon, _extends2({
        ref,
        viewBox: "0 0 48 24",
        a11yTitle: "Hpe"
      }, props), _react["default"].createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M2 6h44v12H2V6zm3 3h38v6H5V9z",
        fill: "#00C781"
      }));
    });
    exports.Hpe = Hpe2;
    Hpe2.displayName = "Hpe";
  }
});

// node_modules/grommet-theme-hpe/dist/es6/themes/hpe.js
var import_react = __toESM(require_react());
init_styled_components_browser_esm();
var import_Ascending = __toESM(require_Ascending());
var import_Blank = __toESM(require_Blank());
var import_CircleAlert = __toESM(require_CircleAlert());
var import_Close = __toESM(require_Close());
var import_Descending = __toESM(require_Descending());
var import_Down = __toESM(require_Down());
var import_Next = __toESM(require_Next());
var import_Previous = __toESM(require_Previous());
var import_Unsorted = __toESM(require_Unsorted());
var import_Up = __toESM(require_Up());
var import_Hpe = __toESM(require_Hpe());

// node_modules/grommet-theme-hpe/dist/es6/themes/backgrounds.js
var backgrounds = {
  "datawave-green-1": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/AdobeStock-57301038_800_0_72_RGB+19849.jpg)",
  "datawave-green-2": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/AdobeStock_222468625_800_0_72_RGB+19870.jpg)",
  "datawave-multi-1": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/AdobeStock-257301038_800_0_72_RGB+19842.jpg)",
  "datawave-multi-2": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/HPE_data_satin_01_800_0_72_RGB+20062.jpg)",
  "datawave-multi-3": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/HPE_data_satin_02_800_0_72_RGB+20061.jpg)",
  "datawave-multi-4": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/HPE_data_slice_01_800_0_72_RGB+20107.jpg)",
  "datawave-multi-5": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/HPE_data_slice_02_800_0_72_RGB+20106.jpg)",
  "datawave-multi-6": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/HPE_data_slice_03_800_0_72_RGB+20105.jpg)",
  "datawave-white-1": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/GettyImages-1135685131_800_0_72_RGB+19858.jpg)",
  "datawave-white-2": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/GettyImages-1278457196_800_0_72_RGB+19857.jpg)",
  "datawave-white-3": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/GettyImages-1304863046_800_0_72_RGB+19856.jpg)",
  "datawave-white-4": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/GettyImages-978721396_800_0_72_RGB+19859.jpg)",
  "light-shadow-1": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/GettyImages-1135685107_800_0_72_RGB+19853.jpg)",
  "light-shadow-2": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/GettyImages-1135685108_800_0_72_RGB+19852.jpg)",
  "light-shadow-3": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/GettyImages-1135685118_800_0_72_RGB+19854.jpg)",
  "light-shadow-4": "url(https://d3hq6blov2iije.cloudfront.net/images/textures/GettyImages-1190757657_800_0_72_RGB+19855.jpg)",
  "orange-yellow": "linear-gradient(\n      45deg,\n      hsl(22deg 100% 50%) 0%,\n      hsl(34deg 100% 50%) 50%,\n      hsl(46deg 100% 50%) 100%\n    );",
  "purple-blue": "linear-gradient(\n      45deg,\n      hsl(281deg 100% 63%) 1%,\n      hsl(227deg 83% 58%) 50%,\n      hsl(174deg 69% 53%) 99%\n    );",
  "purple-blue-yellow": "linear-gradient(\n      225deg,\n      hsl(263deg 82% 55%) 0%,\n      hsl(196deg 72% 53%) 25%,\n      hsl(171deg 80% 63%) 50%,\n      hsl(138deg 93% 68%) 75%,\n      hsl(47deg 99% 50%) 100%\n    );",
  "purple-magenta-yellow": "linear-gradient(\n      45deg,\n      hsl(274deg 100% 50%) 0%,\n      hsl(340deg 100% 50%) 50%,\n      hsl(46deg 100% 50%) 100%\n  );"
};

// node_modules/grommet-theme-hpe/dist/es6/themes/colors.js
var colors = {
  /* deprecated accent and neutral colors */
  "accent-1": void 0,
  "accent-2": void 0,
  "accent-3": void 0,
  "accent-4": void 0,
  "neutral-1": void 0,
  "neutral-2": void 0,
  "neutral-3": void 0,
  "neutral-4": void 0,
  "neutral-5": void 0,
  "status-error": void 0,
  brand: "green!",
  background: {
    dark: "#1C1C1C",
    light: "#FFFFFF"
  },
  "background-back": {
    dark: "#1C1C1C",
    light: "#F7F7F7"
  },
  "background-front": {
    dark: "#222222",
    light: "#FFFFFF"
  },
  "background-contrast": {
    dark: "#FFFFFF0F",
    // 6%
    light: "#0000000A"
  },
  "background-layer-overlay": "#00000080",
  icon: "text",
  text: {
    dark: "#FFFFFF",
    light: "#555555"
  },
  "text-strong": {
    dark: "#FFFFFF",
    light: "#333333"
  },
  "text-weak": {
    dark: "#FFFFFF80",
    // 50%
    light: "#757575"
  },
  "text-xweak": {
    dark: "#FFFFFF33",
    // 20%
    light: "#BBBBBB"
  },
  border: {
    dark: "#FFFFFF5C",
    // 36%
    light: "#0000005C"
    // 36%
  },
  "border-strong": {
    dark: "#FFFFFFB8",
    // 72%
    light: "#000000B8"
    // 72%
  },
  "border-weak": {
    dark: "#FFFFFF1F",
    // 12%
    light: "#0000001F"
    // 12%
  },
  control: "brand",
  "active-background": "background-contrast",
  "active-text": "text",
  "disabled-text": "text-weak",
  // deprecated, use text-weak instead
  "selected-background": "green!",
  "selected-text": "text-primary-button",
  // necessary to meet color contrast on HPE green background
  "status-critical": {
    dark: "#D04F4E",
    light: "#FC5A5A"
  },
  "status-warning": {
    dark: "#9B6310",
    light: "#FFBC44"
  },
  "status-ok": {
    dark: "#008567",
    light: "#17EBA0"
  },
  "status-unknown": {
    dark: "#555555",
    light: "#CCCCCC"
  },
  "status-disabled": "#CCCCCC",
  // deprecated, does not support light and dark. use text-weak instead
  blue: {
    dark: "#00567A",
    light: "#00C8FF"
  },
  "blue!": "#00739D",
  green: {
    dark: "#008567",
    light: "#17EBA0"
  },
  "green!": "#01A982",
  teal: {
    dark: "#117B82",
    light: "#82FFF2"
  },
  "teal!": "#00E8CF",
  purple: {
    dark: "#6633BC",
    light: "#F740FF"
  },
  "purple!": "#7630EA",
  red: {
    dark: "#A2423D",
    light: "#FC6161"
  },
  "red!": "#C54E4B",
  orange: {
    dark: "#9B6310",
    light: "#FFBC44"
  },
  "orange!": "#FF8300",
  yellow: {
    dark: "#8D741C",
    light: "#FFEB59"
  },
  "yellow!": "#FEC901",
  "validation-critical": {
    light: "#FC61613D",
    dark: "#CC1F1A4D"
    // 30%
  },
  "validation-ok": {
    light: "#17EBA03D",
    dark: "#17D0A64D"
  },
  "validation-warning": {
    light: "#FFBC443D",
    dark: "#D891284D"
  },
  "graph-0": "orange!",
  "graph-1": "blue!",
  "graph-2": "purple!",
  "graph-3": "yellow!",
  "graph-4": "teal!",
  focus: "teal!",
  placeholder: "text-weak",
  "text-primary-button": "#FFFFFF",
  "background-cta-alternate": "#F2F2F2"
};

// node_modules/grommet-theme-hpe/dist/es6/themes/hpe.js
var _templateObject;
var _templateObject2;
var _templateObject3;
function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  strings.raw = raw;
  return strings;
}
var baseSpacing = 24;
var isObject = function isObject2(item) {
  return item && typeof item === "object" && !Array.isArray(item);
};
var deepFreeze = function deepFreeze2(obj) {
  Object.keys(obj).forEach(function(key) {
    return key && isObject(obj[key]) && Object.freeze(obj[key]);
  });
  return Object.freeze(obj);
};
var primaryBackground = function primaryBackground2(props) {
  var style = "";
  if (!props.active) {
    style += !props.colorValue ? "background:\nlinear-gradient(70deg, transparent,\n  " + props.theme.global.colors["green!"] + " 35%, transparent 70%)\n  " + props.theme.global.colors["green!"] + ";" : "\n      color: " + props.theme.global.colors["text-strong"][props.theme.dark ? "dark" : "light"] + ";\n    ";
  }
  return style;
};
var primaryHoverBackground = function primaryHoverBackground2(props) {
  return !props.active && !props.colorValue ? "background-color: " + props.theme.global.colors.green.dark + ";" : "";
};
var option = {
  color: "text",
  border: {
    radius: "0px"
  },
  pad: {
    horizontal: "12px",
    vertical: "6px"
  },
  font: {
    weight: 500
  }
};
var hpe = deepFreeze({
  defaultMode: "light",
  global: {
    backgrounds,
    breakpoints: {
      xsmall: {
        value: baseSpacing * 24,
        // 576
        borderSize: {
          xsmall: "1px",
          small: "2px",
          medium: baseSpacing / 6 + "px",
          // 4
          large: baseSpacing / 4 + "px",
          // 6
          xlarge: baseSpacing / 2 + "px"
          // 12
        },
        edgeSize: {
          none: "0px",
          hair: "1px",
          // for Chart
          xxsmall: "2px",
          xsmall: baseSpacing / 8 + "px",
          // 3
          small: baseSpacing / 4 + "px",
          // 6
          medium: baseSpacing / 2 + "px",
          // 12
          large: baseSpacing + "px",
          // 24
          xlarge: baseSpacing * 2 + "px"
          // 48
        },
        size: {
          xxsmall: baseSpacing + "px",
          // 24
          xsmall: baseSpacing * 2 + "px",
          // 48
          small: baseSpacing * 4 + "px",
          // 96
          medium: baseSpacing * 8 + "px",
          // 192
          large: baseSpacing * 16 + "px",
          // 384
          xlarge: baseSpacing * 32 + "px",
          // 768
          full: "100%"
        }
      },
      small: {
        value: baseSpacing * 32
        // 768
      },
      medium: {
        value: baseSpacing * 45
        // 1080
      },
      large: {
        value: baseSpacing * 60
        // 1440
      },
      xlarge: {}
      // anything larger than 1440,
    },
    colors,
    control: {
      border: {
        radius: "6px"
      }
    },
    input: {
      font: {
        height: "inherit",
        weight: 500
      },
      padding: {
        horizontal: "11px",
        // equivalent to 'small' when combined with 1px border
        vertical: "5px"
        // equivalent to 'xsmall' when combined with 1px border
      },
      extend: "\n        &::-webkit-input-placeholder {\n          font-weight: 400;\n        }\n      \n        &::-moz-placeholder {\n          font-weight: 400;\n        }\n      \n        &:-ms-input-placeholder {\n          font-weight: 400;\n        }\n      "
    },
    font: {
      family: "'Metric', Arial, sans-serif",
      face: `
        @font-face {
          font-family: "Metric";
          src: url("https://www.hpe.com/h41225/hfws-static/fonts/metric-hpe-web/MetricHPE-Web-Regular.woff2") format('woff2'),
               url("https://www.hpe.com/h41225/hfws-static/fonts/metric-hpe-web/MetricHPE-Web-Regular.woff") format('woff');
        }
        @font-face {
          font-family: "Metric";
          src: url("https://www.hpe.com/h41225/hfws-static/fonts/metric-hpe-web/MetricHPE-Web-Regular.woff2") format('woff2'),
               url("https://www.hpe.com/h41225/hfws-static/fonts/metric-hpe-web/MetricHPE-Web-Regular.woff") format('woff');
          font-weight: 400;
        }
        @font-face {
          font-family: "Metric";
          src: url("https://www.hpe.com/h41225/hfws-static/fonts/metric-hpe-web/MetricHPE-Web-Bold.woff2") format('woff2'),
               url("https://www.hpe.com/h41225/hfws-static/fonts/metric-hpe-web/MetricHPE-Web-Bold.woff") format('woff');
          font-weight: 700;
        }
        @font-face {
          font-family: "Metric";
          src: url("https://www.hpe.com/h41225/hfws-static/fonts/metric-hpe-web/MetricHPE-Web-Semibold.woff2") format('woff2'),
               url("https://www.hpe.com/h41225/hfws-static/fonts/metric-hpe-web/MetricHPE-Web-Semibold.woff") format('woff');
          font-weight: 600;
        }
        @font-face {
          font-family: "Metric";
          src: url("https://www.hpe.com/h41225/hfws-static/fonts/metric-hpe-web/MetricHPE-Web-Medium.woff2") format('woff2'),
               url("https://www.hpe.com/h41225/hfws-static/fonts/metric-hpe-web/MetricHPE-Web-Medium.woff") format('woff');
          font-weight: 500;
        }
        @font-face {
          font-family: "Metric";
          src: url("https://www.hpe.com/h41225/hfws-static/fonts/metric-hpe-web/MetricHPE-Web-Light.woff2") format('woff2'),
               url("https://www.hpe.com/h41225/hfws-static/fonts/metric-hpe-web/MetricHPE-Web-Light.woff") format('woff');
          font-weight: 100;
        }`
    },
    focus: {
      border: void 0
    },
    active: {
      background: "active-background",
      color: "active-text"
    },
    drop: {
      background: "background-front",
      border: {
        radius: "4px"
      },
      margin: "xsmall",
      intelligentMargin: true,
      shadowSize: "medium",
      /* HPE Global Header/Footer Service a.k.a. HPE Common HFWS sets the header
       * at a z-index of 101. This adjustment brings Drop in alignment with Layer
       * which needs an elevated z-index to sit atop the Global header. */
      zIndex: "110"
    },
    elevation: {
      // Elevation values were derived from this Figma file.
      // https://www.figma.com/file/eZYR3dtWdb9U90QvJ7p3T9/HPE-Color-Styles?node-id=405%3A25
      // Naming in Figma file is strong/default/weak vs. Grommet t-shirt sizing.
      // As defined here, default is currently mapping to medium.
      light: {
        small: "0px 2px 4px #0000001F;",
        medium: "0px 6px 12px #0000001F;",
        large: "0px 12px 24px #0000003D;"
      },
      dark: {
        small: "0px 2px 4px #0000003D;",
        medium: "0px 6px 12px #0000005C;",
        large: "0px 12px 24px #0000007A;"
      }
    },
    hover: {
      background: "active-background",
      color: "active-text"
    },
    selected: {
      background: "selected-background",
      color: "selected-text"
    }
  },
  accordion: {
    panel: {
      border: {
        side: "horizontal",
        color: "border"
      }
    },
    heading: {
      level: 3,
      margin: {
        vertical: "medium",
        horizontal: "xsmall"
      }
    },
    hover: {
      background: "background-contrast",
      heading: {
        color: void 0
      }
    },
    border: void 0,
    icons: {
      collapse: import_Up.Up,
      expand: import_Down.Down,
      color: "text"
    }
  },
  anchor: {
    color: "text-strong",
    textDecoration: "underline",
    fontWeight: 500,
    gap: "xsmall",
    hover: {
      textDecoration: "underline"
    },
    size: {
      large: {
        color: "brand",
        fontWeight: 700,
        textDecoration: "none"
      },
      xlarge: {
        color: "brand",
        fontWeight: 700,
        textDecoration: "none"
      },
      xxlarge: {
        color: "brand",
        fontWeight: 700,
        textDecoration: "none"
      },
      "3xl": {
        color: "brand",
        fontWeight: 700,
        textDecoration: "none"
      },
      "4xl": {
        color: "brand",
        fontWeight: 700,
        textDecoration: "none"
      },
      "5xl": {
        color: "brand",
        fontWeight: 700,
        textDecoration: "none"
      },
      "6xl": {
        color: "brand",
        fontWeight: 700,
        textDecoration: "none"
      }
    }
  },
  avatar: {
    size: {
      large: baseSpacing * 4 + "px"
      // 96px
    },
    text: {
      size: {
        large: "xxlarge"
        // 36px
      }
    }
  },
  button: {
    badge: {
      align: "container",
      container: {
        // align badge background to button label color
        background: "text-strong"
      },
      size: {
        medium: "18px"
      },
      text: {
        size: {
          medium: "xsmall"
        }
      }
    },
    "cta-primary": {
      background: {
        color: "brand"
      },
      color: "text-primary-button",
      font: {
        weight: "bold"
      },
      icon: import_react.default.createElement(import_Hpe.Hpe, null),
      reverse: true,
      extend: function extend(props) {
        return primaryBackground(props);
      }
    },
    "cta-alternate": {
      background: "background-cta-alternate",
      color: "text-strong",
      font: {
        weight: "bold"
      },
      icon: import_react.default.createElement(import_Hpe.Hpe, {
        color: "brand"
      }),
      reverse: true
    },
    "default": {
      color: "text-strong",
      border: void 0,
      font: {
        weight: 600
      }
    },
    gap: "xsmall",
    primary: {
      background: {
        color: "brand"
      },
      color: "text-primary-button",
      font: {
        weight: 700
      },
      extend: function extend2(props) {
        return primaryBackground(props);
      }
    },
    secondary: {
      border: {
        color: "brand",
        width: "2px"
      },
      color: "text-strong",
      font: {
        weight: 600
      }
    },
    toolbar: {
      border: {
        radius: "6px",
        width: "1px",
        color: "border"
      },
      color: "text-strong",
      font: {
        weight: 600
      }
    },
    option,
    active: {
      background: {
        color: "background-contrast"
      },
      color: "text-strong",
      secondary: {
        border: {
          color: "transparent"
        }
      },
      option: {
        background: {
          color: "active-background"
        }
      }
    },
    selected: {
      option: {
        background: "selected-background",
        color: "selected-text",
        font: {
          weight: 700
        }
      }
    },
    hover: {
      "cta-primary": {
        extend: function extend3(props) {
          return primaryHoverBackground(props);
        }
      },
      "cta-alternate": {
        extend: function extend4(_ref) {
          var active = _ref.active, colorValue = _ref.colorValue, theme = _ref.theme;
          var color;
          if (!colorValue && !active) {
            if (theme.dark) {
              color = "rgba(0, 0, 0, 0.2)";
            } else
              color = "rgba(0, 0, 0, 0.2)";
          }
          var style = "inset 0 0 100px 100px " + color;
          return "-moz-box-shadow: " + style + ";\n            -webkit-box-shadow: " + style + ";\n            box-shadow: " + style + ";";
        }
      },
      "default": {
        background: {
          color: "background-contrast"
        },
        color: void 0
      },
      option: {
        background: "active-background",
        color: "active-text"
      },
      primary: {
        extend: function extend5(props) {
          return primaryHoverBackground(props);
        }
      },
      secondary: {
        border: {
          width: "3px"
        }
      },
      toolbar: {
        background: {
          color: "background-contrast"
        },
        color: void 0
      }
    },
    color: "text-strong",
    size: {
      small: {
        border: {
          radius: "2em"
        },
        pad: {
          vertical: "5px",
          horizontal: "12px"
        },
        iconOnly: {
          pad: "7px"
        },
        toolbar: {
          border: {
            radius: "6px"
          }
        }
      },
      medium: {
        border: {
          radius: "2em"
        },
        pad: {
          vertical: "6px",
          horizontal: "18px"
        },
        iconOnly: {
          pad: "9px"
        },
        toolbar: {
          border: {
            radius: "6px"
          },
          pad: {
            vertical: "6px",
            horizontal: "12px"
          }
        }
      },
      large: {
        border: {
          radius: "2em"
        },
        pad: {
          vertical: "10px",
          horizontal: "24px"
        },
        iconOnly: {
          pad: "13px"
        },
        toolbar: {
          border: {
            radius: "8px"
          },
          pad: {
            vertical: "10px",
            horizontal: "16px"
          }
        }
      },
      xlarge: {
        border: {
          radius: "2em"
        },
        pad: {
          vertical: "21px",
          horizontal: "30px"
        },
        iconOnly: {
          pad: "24px"
        }
      }
    },
    extend: function extend6(_ref2) {
      var hasIcon = _ref2.hasIcon, hasLabel = _ref2.hasLabel, sizeProp = _ref2.sizeProp;
      var fontSize = "19px";
      var lineHeight = "24px";
      var style = "";
      var iconOnly = hasIcon && !hasLabel;
      if ((sizeProp === "medium" || sizeProp === void 0) && !iconOnly) {
        style += "font-size: " + fontSize + ";\n        line-height: " + lineHeight + ";";
      }
      return style;
    }
  },
  calendar: {
    // ensure color is #FFFFFF to meet color contrast requirement on HPE green
    day: {
      extend: function extend7(_ref3) {
        var isSelected = _ref3.isSelected, theme = _ref3.theme;
        return isSelected && "color: " + theme.global.colors["text-primary-button"] + ";";
      }
    },
    icons: {
      next: import_Next.Next,
      previous: import_Previous.Previous
    },
    small: {
      fontSize: "13.6px",
      lineHeight: 1.375,
      daySize: "27.43px",
      title: {
        size: "medium",
        weight: 500,
        color: "text-strong"
      }
    },
    medium: {
      fontSize: "18px",
      lineHeight: 1.45,
      daySize: "54.86px",
      title: {
        size: "large",
        weight: 500,
        color: "text-strong"
      }
    },
    large: {
      fontSize: "31.2px",
      lineHeight: 1.11,
      daySize: "109.71px",
      title: {
        size: "xlarge",
        weight: 500,
        color: "text-strong"
      }
    }
  },
  card: {
    container: {
      background: "background-front",
      elevation: "medium",
      extend: "transition: all 0.3s ease-in-out;"
    },
    body: {
      pad: "medium"
    },
    footer: {
      pad: {
        horizontal: "medium",
        vertical: "small"
      }
    },
    header: {
      pad: "medium"
    },
    hover: {
      container: {
        elevation: "large"
      }
    }
  },
  checkBox: {
    hover: {
      border: {
        color: "border-strong"
      },
      background: {
        color: "background-contrast"
      },
      // HPE Design System guidance states that pad="none" should be applied on CheckBox
      // when its used outside of a FormField. We will apply this hover treatment in
      // those instances.
      extend: function extend8(_ref4) {
        var disabled = _ref4.disabled, pad = _ref4.pad, theme = _ref4.theme;
        return Ae(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n        ", "\n      "])), !disabled && pad === "none" && "border: 2px solid " + theme.global.colors["border-strong"][theme.dark ? "dark" : "light"] + ";");
      }
    },
    color: "background",
    border: {
      color: "border",
      width: "1px"
    },
    check: {
      radius: "4px",
      extend: function extend9(_ref5) {
        var theme = _ref5.theme, checked = _ref5.checked, indeterminate = _ref5.indeterminate;
        return "\n      background-color: " + (checked || indeterminate ? theme.global.colors["green!"] : theme.global.colors.background[theme.dark ? "dark" : "light"]) + ";\n      " + ((checked || indeterminate) && "border: none;") + "\n        ";
      }
    },
    icon: {
      extend: function extend10(_ref6) {
        var theme = _ref6.theme;
        return "stroke-width: 2px;\n      stroke: " + theme.global.colors["text-primary-button"];
      }
    },
    gap: "small",
    label: {
      align: "start"
    },
    pad: {
      vertical: "xsmall",
      horizontal: "small"
    },
    toggle: {
      background: "background",
      color: "background",
      knob: {
        extend: function extend11(_ref7) {
          var theme = _ref7.theme;
          return "\n           box-shadow: " + theme.global.elevation[theme.dark ? "dark" : "light"].small + ";\n           border: 1px solid " + theme.global.colors.border[theme.dark ? "dark" : "light"] + "\n        ";
        }
      },
      extend: function extend12(_ref8) {
        var checked = _ref8.checked, theme = _ref8.theme;
        return "\n        " + (checked && "background-color: " + theme.global.colors["green!"] + ";") + "\n      ";
      }
    },
    // HPE Design System guidance states that pad="none" should be applied on CheckBox
    // when its used outside of a FormField. We will apply this hover treatment in
    // those instances.
    extend: function extend13(_ref9) {
      var disabled = _ref9.disabled, pad = _ref9.pad;
      return Ae(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n    ", "\n    font-weight: 500;\n    width: auto;\n  };\n  "])), !disabled && pad === "none" && ":hover {\n      background-color: unset;\n    }");
    }
  },
  checkBoxGroup: {
    container: {
      gap: "none",
      margin: {
        vertical: "xsmall"
      }
    }
  },
  data: {
    button: {
      kind: "toolbar"
    }
  },
  dataTable: {
    body: {
      extend: function extend14(_ref10) {
        var theme = _ref10.theme;
        return "\n        /* Margin and padding allow room for focus on table body */\n        margin: " + theme.global.edgeSize.xxsmall + " 0px;\n        padding: 0px " + theme.global.edgeSize.xxsmall + ";\n      ";
      }
    },
    header: {
      border: {
        side: "bottom"
      },
      color: "text-strong",
      extend: function extend15(_ref11) {
        var column = _ref11.column, sort = _ref11.sort, sortable2 = _ref11.sortable, theme = _ref11.theme;
        return "\n          " + (sort && sort.property === column && "\n            background: " + theme.global.colors["background-contrast"][theme.dark ? "dark" : "light"] + "\n          ") + ";\n          " + (sortable2 && sort && sort.property !== column && "\n              svg {\n                opacity: 0;\n              }\n              :hover {\n                svg {\n                  opacity: 1;\n                }\n              }\n            ") + ";\n        ";
      },
      font: {
        weight: 500
      },
      gap: "none",
      hover: {
        background: {
          color: "background-contrast"
        }
      },
      pad: {
        horizontal: "small",
        vertical: "xsmall"
      },
      units: {
        color: "text-weak"
      }
    },
    icons: {
      ascending: function ascending() {
        return import_react.default.createElement(import_Ascending.Ascending, {
          size: "large"
        });
      },
      descending: function descending() {
        return import_react.default.createElement(import_Descending.Descending, {
          size: "large"
        });
      },
      contract: function contract() {
        return import_react.default.createElement(import_Up.Up, {
          height: "medium"
        });
      },
      expand: function expand() {
        return import_react.default.createElement(import_Down.Down, {
          height: "medium"
        });
      },
      sortable: function sortable() {
        return import_react.default.createElement(import_Unsorted.Unsorted, {
          size: "large"
        });
      }
    },
    pinned: {
      header: {
        extend: "backdrop-filter: blur(12px);"
      },
      body: {
        extend: "backdrop-filter: blur(12px);"
      },
      footer: {
        extend: "backdrop-filter: blur(12px);"
      }
    },
    primary: {
      weight: 500,
      color: "text-strong"
    },
    resize: {
      hover: {
        border: {
          color: "border-strong",
          size: "small"
        }
      }
    }
  },
  dateInput: {
    container: {
      round: "xsmall"
    },
    icon: {
      size: "small"
    }
  },
  fileInput: {
    border: {
      size: "xsmall"
    },
    button: {
      border: {
        radius: "2em"
      },
      pad: {
        vertical: "6px",
        horizontal: "12px"
      },
      color: "text-strong",
      font: {
        weight: "bold"
      },
      hover: {
        background: "background-contrast",
        color: "text-strong"
      }
    },
    dragOver: {
      background: "background-contrast",
      border: "none"
    },
    hover: {
      border: {
        color: "border"
      }
    },
    icons: {
      remove: import_Close.Close
    },
    message: {
      color: "placeholder"
    },
    pad: {
      horizontal: "xsmall"
    },
    extend: "border-radius: 4px;"
  },
  formField: {
    content: {
      margin: {
        vertical: "xsmall"
      },
      pad: void 0
    },
    border: {
      error: {
        color: "border-strong"
      },
      color: "border",
      side: "all"
    },
    disabled: {
      background: {
        color: void 0
      },
      border: {
        color: "border-weak"
      },
      label: {
        color: "text-xweak"
      }
    },
    error: {
      background: {
        color: "validation-critical"
      },
      container: {
        gap: "xsmall"
      },
      icon: import_react.default.createElement(import_CircleAlert.CircleAlert, {
        size: "small"
      }),
      size: "xsmall",
      color: "text",
      margin: {
        bottom: "xsmall",
        top: "none",
        horizontal: "none"
      }
    },
    focus: {
      border: {
        color: "border-strong"
      }
    },
    help: {
      size: "xsmall",
      color: "text",
      margin: "none"
    },
    info: {
      size: "xsmall",
      color: "text",
      margin: {
        bottom: "xsmall",
        top: "none",
        horizontal: "none"
      }
    },
    label: {
      size: "xsmall",
      color: "text",
      margin: {
        bottom: "none",
        top: "xsmall",
        horizontal: "none"
      },
      requiredIndicator: true,
      weight: 500
    },
    margin: {
      bottom: "none"
    },
    round: "6px",
    survey: {
      label: {
        margin: {
          bottom: "none"
        }
      }
    }
  },
  heading: {
    color: "text-strong",
    weight: 500,
    level: {
      1: {
        font: {
          weight: 500
        },
        small: {
          size: "24px",
          height: "24px"
        },
        medium: {
          size: "36px",
          height: "36px"
        },
        large: {
          size: "48px",
          height: "48px"
        },
        xlarge: {
          size: "60px",
          height: "60px"
        }
      },
      2: {
        small: {
          size: "20px",
          height: "20px"
        },
        medium: {
          size: "24px",
          height: "24px"
        },
        large: {
          size: "36px",
          height: "36px"
        },
        xlarge: {
          size: "48px",
          height: "48px"
        }
      },
      3: {
        font: {
          weight: 500
        },
        small: {
          size: "16px",
          height: "16px"
        },
        medium: {
          size: "20px",
          height: "20px"
        },
        large: {
          size: "24px",
          height: "24px"
        },
        xlarge: {
          size: "36px",
          height: "36px"
        }
      },
      4: {
        font: {
          weight: 500
        },
        small: {
          size: "12px",
          height: "12px"
        },
        medium: {
          size: "16px",
          height: "16px"
        },
        large: {
          size: "20px",
          height: "20px"
        },
        xlarge: {
          size: "24px",
          height: "24px"
        }
      },
      5: {
        font: {
          weight: 600
        },
        small: {
          size: "12px",
          height: "12px"
        },
        medium: {
          size: "12px",
          height: "12px"
        },
        large: {
          size: "16px",
          height: "16px"
        },
        xlarge: {
          size: "20px",
          height: "20px"
        }
      },
      6: {
        font: {
          weight: 600
        },
        small: {
          size: "12px",
          height: "12px"
        },
        medium: {
          size: "12px",
          height: "12px"
        },
        large: {
          size: "12px",
          height: "12px"
        },
        xlarge: {
          size: "16px",
          height: "16px"
        }
      }
    },
    // This block applies size-specific weights to headings to ensure
    // that as heading sizes get small, the weight increases and as they
    // get large, the weight decreases.
    // This block can be removed once grommet theme structure is enhanced
    // to support level and size-specific weights.
    extend: function extend16(_ref12) {
      var level = _ref12.level, size = _ref12.size;
      var fontWeight = "";
      if (level === 3 && size === "small") {
        fontWeight = "font-weight: 600;";
      } else if (level === 4 && ["small", "medium", void 0].includes(size)) {
        fontWeight = "font-weight: 600;";
      } else if (level === 5 && size === "xlarge") {
        fontWeight = "font-weight: 500;";
      }
      return fontWeight;
    }
  },
  icon: {
    disableScaleDown: true,
    matchSize: true,
    size: {
      small: "16px",
      medium: "18px",
      large: "22px",
      xlarge: "24px",
      xxlarge: "36px"
    }
  },
  layer: {
    background: "background",
    border: {
      radius: "small",
      intelligentRounding: true
    },
    container: {
      elevation: "large"
    },
    overlay: {
      background: "background-layer-overlay"
    },
    /* HPE Global Header/Footer Service a.k.a. HPE Common HFWS sets the header
     * at a z-index of 101. This adjustment allows for Layer modals and side-drawers
     * to sit atop the Global header. */
    zIndex: "110"
  },
  list: {
    item: {
      border: void 0
    }
  },
  maskedInput: {
    container: {
      extend: function extend17(_ref13) {
        var theme = _ref13.theme;
        return "\n        svg {\n          fill: " + theme.global.colors["text-strong"][theme.dark ? "dark" : "light"] + ";\n          stroke: " + theme.global.colors["text-strong"][theme.dark ? "dark" : "light"] + ";\n        }\n      ";
      }
    }
  },
  menu: {
    drop: {
      align: {
        top: "bottom",
        left: "left"
      }
    },
    group: {
      container: {
        pad: "none"
      },
      separator: {
        color: "border",
        pad: "none"
      }
    },
    icons: {
      color: "text-strong",
      down: import_Down.Down
    },
    item: {
      pad: {
        horizontal: "18px",
        vertical: "6px"
      }
    }
  },
  nameValuePair: {
    name: {
      color: "text-strong",
      weight: 500
    }
  },
  notification: {
    close: {
      icon: import_Close.Close
    },
    container: {
      round: "xsmall"
    },
    direction: "column",
    global: {
      direction: "row",
      container: {
        round: "none"
      }
    },
    message: {
      color: {
        dark: "text-strong"
      }
    },
    title: {
      // any text props
      color: "text-strong",
      weight: 500
    },
    critical: {
      background: "validation-critical",
      global: {
        background: "validation-critical"
      },
      toast: {
        background: "background-front"
      }
    },
    warning: {
      background: "validation-warning",
      global: {
        background: "validation-warning"
      },
      toast: {
        background: "background-front"
      }
    },
    normal: {
      background: "validation-ok",
      global: {
        background: "validation-ok"
      },
      toast: {
        background: "background-front"
      }
    },
    unknown: {
      background: "background-contrast",
      global: {
        background: "background-contrast"
      },
      toast: {
        background: "background-front"
      }
    },
    info: {
      background: "background-contrast",
      global: {
        background: "background-contrast"
      },
      toast: {
        background: "background-front"
      }
    },
    undefined: {
      background: "background-contrast",
      global: {
        background: "background-contrast"
      },
      toast: {
        background: "background-front"
      }
    }
  },
  page: {
    wide: {
      width: {
        min: "336px",
        // 336 + 24 (margin) + 24 (margin) = 384 (e.g. 'medium')
        max: "xxlarge"
      },
      xsmall: {
        pad: {
          horizontal: "large"
        }
      },
      xlarge: {
        pad: {
          horizontal: "large"
        }
      }
    },
    narrow: {
      width: {
        min: "336px",
        // 336 + 24 (margin) + 24 (margin) = 384 (e.g. 'medium')
        max: "large"
      },
      xsmall: {
        pad: {
          horizontal: "large"
        }
      },
      xlarge: {
        pad: {
          horizontal: "large"
        }
      }
    },
    full: {
      width: {
        min: "336px",
        // 336 + 24 (margin) + 24 (margin) = 384 (e.g. 'medium')
        max: "100%"
      },
      xsmall: {
        pad: {
          horizontal: "large"
        }
      },
      xlarge: {
        pad: {
          horizontal: "large"
        }
      }
    }
  },
  pageHeader: {
    responsive: {
      breakpoints: ["xsmall", "small"]
    },
    subtitle: {
      size: "xlarge"
    },
    xsmall: {
      areas: [["parent", "parent"], ["title", "actions"], ["subtitle", "actions"]],
      columns: [["small", "flex"], "auto"],
      rows: ["auto", "auto", "auto"],
      gap: {
        row: "xsmall",
        column: "medium"
      }
    },
    xlarge: {
      areas: [["parent", "parent"], ["title", "actions"], ["subtitle", "actions"]],
      columns: [["medium", "large"], "auto"],
      rows: ["auto", "auto", "auto"],
      gap: {
        row: "xsmall",
        column: "large"
      }
    }
  },
  pagination: {
    button: {
      border: {
        radius: "2em"
      },
      font: {
        weight: 600
      },
      active: {
        border: {
          radius: "2em"
        },
        color: "text-strong",
        font: {
          weight: 600
        }
      },
      disabled: {
        color: "text-xweak"
      }
    }
  },
  paragraph: {
    xsmall: {
      size: "14px",
      height: "16px",
      maxWidth: "25em"
    },
    small: {
      size: "16px",
      height: "20px",
      maxWidth: "25em"
    },
    medium: {
      size: "18px",
      height: "24px",
      maxWidth: "25em"
    },
    large: {
      size: "22px",
      height: "28px",
      maxWidth: "25em"
    },
    xlarge: {
      size: "24px",
      height: "30px",
      maxWidth: "25em"
    },
    xxlarge: {
      size: "36px",
      height: "40px",
      maxWidth: "25em"
    },
    // This block applies size-specific weights to paragraph to ensure
    // that as paragraph sizes get larger, the weight decreases.
    // This block can be removed once grommet theme structure is enhanced
    // to support size-specific weights.
    extend: function extend18(_ref14) {
      var size = _ref14.size;
      return "\n      " + (["xxlarge"].includes(size) ? "font-weight: 300;" : "") + ";\n    ";
    }
  },
  radioButton: {
    border: {
      color: "border",
      width: "xsmall"
    },
    check: {
      color: "selected-background",
      background: {
        color: "background-front"
      }
    },
    color: "selected-background",
    container: {
      extend: function extend19(_ref15) {
        var theme = _ref15.theme;
        return "\n      font-weight: 500;\n      width: auto;\n      padding: " + theme.global.edgeSize.xxsmall + " " + theme.global.edgeSize.xsmall + ";\n    ";
      }
    },
    extend: function extend20(_ref16) {
      var theme = _ref16.theme;
      return "\n      padding: " + theme.global.edgeSize.xxsmall + " " + theme.global.edgeSize.xsmall + ";\n    ";
    },
    gap: "xsmall",
    hover: {
      background: {
        color: "background-contrast"
      },
      border: {
        color: void 0
      }
    },
    icons: {
      circle: function circle() {
        return import_react.default.createElement(import_Blank.Blank, {
          color: "selected-background"
        }, import_react.default.createElement("circle", {
          cx: "12",
          cy: "12",
          r: "8"
        }));
      }
    }
  },
  radioButtonGroup: {
    container: {
      gap: "none",
      margin: {
        vertical: "xsmall"
      }
    }
  },
  rangeInput: {
    thumb: {
      color: "brand"
    },
    track: {
      lower: {
        color: "brand"
      },
      upper: {
        color: "border"
      }
    }
  },
  select: {
    control: {
      extend: function extend21(_ref17) {
        var disabled = _ref17.disabled;
        return Ae(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose(["\n        ", "\n      "])), disabled && "\n        opacity: 0.3;\n        input {\n          cursor: default;\n        }");
      }
    },
    emptySearchMessage: {
      container: {
        pad: option.pad
      }
    },
    icons: {
      color: "text",
      down: import_Down.Down,
      margin: {
        left: "small",
        // setting right margin to 12px because on small
        // screens, Select responsive padding sizes down
        // which brings the icon too tight with edge of
        // control.
        right: "12px"
      },
      up: import_Up.Up
    },
    options: void 0
  },
  spinner: {
    container: {
      pad: "none",
      color: "brand",
      border: [{
        color: "border-weak",
        side: "all",
        size: "medium"
      }, {
        color: "border-weak",
        side: "right",
        size: "medium"
      }, {
        color: "border-weak",
        side: "top",
        size: "medium"
      }, {
        color: "border-weak",
        side: "left",
        size: "medium"
      }]
    }
  },
  starRating: {
    color: "brand"
  },
  tab: {
    color: "text",
    active: {
      background: void 0,
      color: "text-strong",
      weight: 600
    },
    hover: {
      background: "transparent",
      color: "text"
    },
    border: {
      side: "bottom",
      color: "transparent",
      size: "medium",
      active: {
        color: "brand"
      },
      disabled: {
        color: void 0
      },
      hover: {
        color: "border-weak"
      }
    },
    disabled: {
      color: "text-xweak"
    },
    pad: {
      // top and bottom pad need to be defined individually, specifying
      // "vertical" only applies to top
      bottom: "9px",
      top: "9px",
      // align horizontal pad with button
      horizontal: "18px"
    },
    margin: {
      // bring the overall tabs border behind invidual tab borders
      vertical: "-1px",
      horizontal: "none"
    }
  },
  tabs: {
    header: {
      border: {
        side: "bottom",
        size: "xsmall",
        color: "border-weak"
      }
    },
    step: {
      xsmall: 1,
      xlarge: 3
    }
  },
  table: {
    header: {
      extend: "\n        > div { \n          height: 100%;\n          justify-content: center;\n        }\n        // align onSelect checkbox to center of header cell\n        label { \n          justify-content: center;\n        }\n      ",
      // space for focus indicator on sortable columns
      pad: {
        left: "none",
        vertical: "none",
        right: "xxsmall"
      }
    },
    body: {
      extend: function extend22(_ref18) {
        var theme = _ref18.theme;
        return "\n          :hover {\n            button {\n              background: " + theme.global.colors["background-contrast"][theme.dark ? "dark" : "light"] + "\n            }\n          }\n        ";
      }
    },
    row: {
      hover: {
        background: "background-contrast"
      }
    },
    footer: {
      extend: "\n        font-weight: 500;\n      "
    }
  },
  tag: {
    pad: {
      horizontal: "small",
      vertical: "5px"
      // 5px pad + 1px border = 6px 'xsmall'
    },
    value: {
      weight: 500
    }
  },
  text: {
    xsmall: {
      size: "14px",
      height: "16px"
    },
    small: {
      size: "16px",
      height: "20px"
    },
    medium: {
      size: "18px",
      height: "24px"
    },
    large: {
      size: "22px",
      height: "28px"
    },
    xlarge: {
      size: "24px",
      height: "30px"
    },
    xxlarge: {
      size: "36px",
      height: "40px"
    },
    "3xl": {
      size: "42px",
      height: "46px"
    },
    "4xl": {
      size: "48px",
      height: "48px"
    },
    "5xl": {
      size: "72px",
      height: "72px"
    },
    "6xl": {
      size: "72px",
      height: "72px"
    },
    // This block applies size-specific weights to text to ensure
    // that as text sizes get larger, the weight decreases.
    // This block can be removed once grommet theme structure is enhanced
    // to support size-specific weights.
    extend: function extend23(_ref19) {
      var size = _ref19.size;
      return "\n      " + (["xxlarge", "3xl", "4xl", "5xl", "6xl"].includes(size) ? "font-weight: 300;" : "") + ";\n    ";
    }
  },
  textInput: {
    container: {
      extend: function extend24(_ref20) {
        var theme = _ref20.theme;
        return "\n        svg {\n          fill: " + theme.global.colors["text-strong"][theme.dark ? "dark" : "light"] + ";\n          stroke: " + theme.global.colors["text-strong"][theme.dark ? "dark" : "light"] + ";\n        }\n      ";
      }
    }
  },
  tip: {
    content: {
      background: "background",
      border: {
        color: "border-weak"
      },
      margin: "xxsmall",
      elevation: "small",
      pad: {
        vertical: "none",
        horizontal: "small"
      },
      round: "xsmall"
    }
  },
  thumbsRating: {
    like: {
      color: "brand"
    },
    dislike: {
      color: "brand"
    }
  },
  // Theme-Designer only parameters
  name: "HPE 1",
  rounding: 4,
  scale: 1.1,
  spacing: 24
});

// node_modules/grommet-theme-hpe/dist/es6/themes/hpePop.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var isObject3 = function isObject4(item) {
  return item && typeof item === "object" && !Array.isArray(item);
};
var deepMerge = function deepMerge2(target) {
  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    sources[_key - 1] = arguments[_key];
  }
  if (!sources.length) {
    return target;
  }
  var output = _extends({}, target);
  sources.forEach(function(source) {
    if (isObject3(source)) {
      Object.keys(source).forEach(function(key) {
        if (isObject3(source[key])) {
          if (!output[key]) {
            output[key] = _extends({}, source[key]);
          } else {
            output[key] = deepMerge2(output[key], source[key]);
          }
        } else {
          output[key] = source[key];
        }
      });
    }
  });
  return output;
};
var hpePop = deepMerge(hpe, {
  heading: {
    color: "text-strong",
    weight: 400,
    level: {
      1: {
        font: {
          weight: 400
        },
        small: {
          size: "48px",
          height: "48px"
        },
        medium: {
          size: "72px",
          height: "72px"
        },
        large: {
          size: "96px",
          height: "96px"
        },
        xlarge: {
          size: "120px",
          height: "120px"
        }
      },
      2: {
        small: {
          size: "36px",
          height: "36px"
        },
        medium: {
          size: "48px",
          height: "48px"
        },
        large: {
          size: "72px",
          height: "72px"
        },
        xlarge: {
          size: "96px",
          height: "96px"
        }
      },
      3: {
        small: {
          size: "24px",
          height: "24px"
        },
        medium: {
          size: "36px",
          height: "36px"
        },
        large: {
          size: "48px",
          height: "48px"
        },
        xlarge: {
          size: "72px",
          height: "72px"
        }
      },
      4: {
        font: {
          weight: 500
        },
        small: {
          size: "18px",
          height: "18px"
        },
        medium: {
          size: "24px",
          height: "24px"
        },
        large: {
          size: "36px",
          height: "36px"
        },
        xlarge: {
          size: "48px",
          height: "48px"
        }
      },
      5: {
        font: {
          weight: 500
        },
        small: {
          size: "16px",
          height: "16px"
        },
        medium: {
          size: "18px",
          height: "18px"
        },
        large: {
          size: "24px",
          height: "24px"
        },
        xlarge: {
          size: "36px",
          height: "36px"
        }
      },
      6: {
        font: {
          weight: 500
        },
        small: {
          size: "14px",
          height: "14px"
        },
        medium: {
          size: "16px",
          height: "16px"
        },
        large: {
          size: "18px",
          height: "18px"
        },
        xlarge: {
          size: "24px",
          height: "24px"
        }
      }
    },
    extend: function extend25(_ref) {
      var level = _ref.level, size = _ref.size;
      var fontWeight = "";
      if (level === 3 && size === "small") {
        fontWeight = "font-weight: 500;";
      } else if (level === 4 && ["large", "xlarge"].includes(size)) {
        fontWeight = "font-weight: 400;";
      } else if (level === 5 && size === "xlarge") {
        fontWeight = "font-weight: 400;";
      } else if (level === 6 && size === "small") {
        fontWeight = "font-weight: 600;";
      }
      return fontWeight;
    }
  },
  paragraph: {
    small: {
      size: "16px",
      height: "20px"
    },
    medium: {
      size: "18px",
      height: "22px"
    },
    large: {
      size: "24px",
      height: "30px"
    },
    xlarge: {
      size: "36px",
      height: "42px"
    },
    xxlarge: {
      size: "42px",
      height: "48px"
    },
    extend: function extend26(_ref2) {
      var size = _ref2.size;
      if (["large", "xlarge", "xxlarge"].includes(size))
        return "font-weight: 300;";
      return "";
    }
  },
  text: {
    xsmall: {
      // weight needs to be modified at the size level
      size: "14px",
      height: "18px"
    },
    small: {
      // weight needs to be modified at the size level
      size: "16px",
      height: "20px"
    },
    medium: {
      // weight needs to be modified at the size level
      size: "18px",
      height: "22px"
    },
    large: {
      // weight needs to be modified at the size level by bumping down to 300
      size: "24px",
      height: "30px"
    },
    xlarge: {
      // weight needs to be modified at the size level by bumping down to 300
      size: "36px",
      height: "42px"
    },
    // xxlarge is not part of Chris's type exploration
    xxlarge: {
      // weight needs to be modified at the size level by bumping down to 300
      size: "42px",
      height: "48px"
    },
    extend: function extend27(_ref3) {
      var size = _ref3.size;
      if (["large", "xlarge", "xxlarge", "3xl", "4xl", "5xl", "6xl"].includes(size))
        return "font-weight: 300;";
      return "";
    }
  }
});

// node_modules/grommet-theme-hpe/dist/es6/themes/prism.js
var colors2 = {
  atrule: {
    dark: colors.orange.light,
    light: colors.orange.dark
  },
  "attr-name": {
    dark: colors["teal!"],
    light: colors.teal.dark
  },
  "attr-value": {
    dark: colors.orange.light,
    light: colors.orange.dark
  },
  background: {
    dark: "black",
    light: colors["background-contrast"].light
  },
  "boolean": {
    dark: colors["teal!"],
    light: colors.teal.dark
  },
  "class-name": {
    dark: colors["status-critical"].light,
    light: colors.red.dark
  },
  builtin: {
    dark: colors["teal!"],
    light: colors.teal.dark
  },
  "char": {
    dark: colors["teal!"],
    light: colors.teal.dark
  },
  code: colors.text,
  comment: {
    dark: colors.green.light,
    light: colors.green.dark
  },
  entity: {
    dark: colors.blue.light,
    light: colors.blue.dark
  },
  "function": {
    dark: colors["status-critical"].light,
    light: colors.red.dark
  },
  important: {
    dark: colors.orange.light,
    light: colors.orange.dark
  },
  inserted: {
    dark: colors["teal!"],
    light: colors.teal.dark
  },
  keyword: {
    dark: colors.blue.light,
    light: colors.blue.dark
  },
  "maybe-class-name": {
    dark: colors.purple.light,
    light: colors["purple!"]
  },
  number: {
    dark: colors["teal!"],
    light: colors.teal.dark
  },
  operator: {
    dark: colors.orange.light,
    light: colors.orange.dark
  },
  regex: {
    dark: colors.orange.light,
    light: colors.orange.dark
  },
  selector: {
    dark: colors["teal!"],
    light: colors.teal.dark
  },
  string: {
    dark: colors["teal!"],
    light: colors.teal.dark
  },
  url: {
    dark: colors.blue.light,
    light: colors.blue.dark
  },
  variable: {
    dark: colors.blue.light,
    light: colors.blue.dark
  },
  ".language-css .token.string": {
    dark: colors.blue.light,
    light: colors.blue.dark
  },
  ".style .token.string": {
    dark: colors.blue.light,
    light: colors.blue.dark
  }
};
var themeMode = function themeMode2(mode) {
  return {
    'code[class*="language-"]': {
      color: colors2.code[mode],
      background: "none",
      textAlign: "left",
      whiteSpace: "pre",
      wordSpacing: "normal",
      wordBreak: "normal",
      wordWrap: "normal",
      lineHeight: "1.5",
      MozTabSize: "4",
      OTabSize: "4",
      tabSize: "4",
      WebkitHyphens: "none",
      MozHyphens: "none",
      msHyphens: "none",
      hyphens: "none"
    },
    'pre[class*="language-"]': {
      color: colors2.code[mode],
      background: colors2.background[mode],
      textAlign: "left",
      whiteSpace: "pre",
      wordSpacing: "normal",
      wordBreak: "normal",
      wordWrap: "normal",
      lineHeight: "1.5",
      MozTabSize: "4",
      OTabSize: "4",
      tabSize: "4",
      WebkitHyphens: "none",
      MozHyphens: "none",
      msHyphens: "none",
      hyphens: "none",
      padding: "1em",
      margin: "0",
      overflow: "auto",
      borderRadius: "0.3em"
    },
    ':not(pre) > code[class*="language-"]': {
      background: colors2.background[mode],
      padding: "0.1em",
      borderRadius: "0.3em",
      whiteSpace: "normal"
    },
    "class-name": {
      color: colors2["class-name"][mode]
    },
    "maybe-class-name": {
      color: colors2["maybe-class-name"][mode]
    },
    comment: {
      color: colors2.comment[mode]
    },
    "function": {
      color: colors2["function"][mode]
    },
    operator: {
      color: colors2.operator[mode]
    },
    string: {
      color: colors2.string[mode]
    },
    "boolean": {
      color: colors2["boolean"][mode]
    },
    number: {
      color: colors2.number[mode]
    },
    keyword: {
      color: colors2.keyword[mode]
    },
    selector: {
      color: colors2.selector[mode]
    },
    "attr-name": {
      color: colors2["attr-name"][mode]
    },
    "char": {
      color: colors2["char"][mode]
    },
    builtin: {
      color: colors2.builtin[mode]
    },
    inserted: {
      color: colors2.inserted[mode]
    },
    entity: {
      color: colors2.entity[mode],
      cursor: "help"
    },
    url: {
      color: colors2.url[mode]
    },
    ".language-css .token.string": {
      color: colors2[".language-css .token.string"][mode]
    },
    ".style .token.string": {
      color: colors2[".style .token.string"][mode]
    },
    variable: {
      color: colors2.variable[mode]
    },
    atrule: {
      color: colors2.atrule[mode]
    },
    "attr-value": {
      color: colors2["attr-value"][mode]
    },
    regex: {
      color: colors2.regex[mode]
    },
    important: {
      color: colors2.important[mode],
      fontWeight: "bold"
    },
    bold: {
      fontWeight: "bold"
    },
    italic: {
      fontStyle: "italic"
    }
  };
};
var prism = {
  dark: themeMode("dark"),
  light: themeMode("light")
};
export {
  backgrounds,
  colors,
  deepMerge,
  hpe,
  hpePop,
  isObject3 as isObject,
  prism
};
//# sourceMappingURL=grommet-theme-hpe.js.map
